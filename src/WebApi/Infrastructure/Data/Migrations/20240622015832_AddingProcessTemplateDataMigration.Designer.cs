// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Papirus.WebApi.Infrastructure.Data;

#nullable disable

namespace Papirus.WebApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240622015832_AddingProcessTemplateDataMigration")]
    partial class AddingProcessTemplateDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorTypeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ActorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ActorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Reclamante"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Defendido"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.BusinessLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BusinessLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bancolombia S.A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Leasing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sufi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Renting"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("AnsweredDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BusinessLineId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Court")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DeadLineDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailHtmlBody")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("GuidIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmissionIdentifier")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessLineId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProcessTypeId");

                    b.HasIndex("SubProcessId");

                    b.HasIndex(new[] { "GuidIdentifier" }, "UQ_Cases_GuidIdentifier")
                        .IsUnique();

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.CaseDocumentFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CaseProcessDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Multiplicity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProcessDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseProcessDocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProcessDocumentTypeId");

                    b.ToTable("CaseDocumentFieldValues");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.CaseProcessDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessDocumentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProcessDocumentTypeId");

                    b.ToTable("CaseProcessDocuments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Certificado de Tradición"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Escritura Pública"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pagaré"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Liquidación de Crédito-F46"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Endoso"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Liquidación"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Certicámara"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Super Intendencia"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Representación Legal Alianza"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Representación Legal Abogado"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Poder Especial"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Soporte de Vinculación"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cámara Comercio Bancolombia"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Cámara Comercio Alianza"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Registro Nacional de Abogados (SIRNA)"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Certificado de Dependientes"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Carta de Instrucciones Requerida"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Carta de Instrucciones Adicional"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Carta de Demanda"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Tutela"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Tutela Email Body"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GuidIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GuidIdentifier" }, "UQ_Firms_GuidIdentifier")
                        .IsUnique();

                    b.ToTable("Firms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GuidIdentifier = new Guid("2f477197-1004-41c7-9c45-a8015935c439"),
                            Name = "Gómez Pineda Abogados"
                        },
                        new
                        {
                            Id = 2,
                            GuidIdentifier = new Guid("d720527f-2dc5-44b3-a7c4-0d46f9fb865b"),
                            Name = "Alianza"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feast of St Peter and St Paul"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Independence Day"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 8, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Battle of Boyacá Day"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Assumption Day Holiday"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Columbus Day Holiday"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "All Saints Day Holiday"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Independence of Cartagena Holiday"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Immaculate Conception"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 12, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Christmas Day"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "CC",
                            Name = "Cédula de Ciudadanía"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "CE",
                            Name = "Cédula de Extranjería"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "PT",
                            Name = "Pasaporte"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "NIT",
                            Name = "Número de Identificación Tributaria"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "RUT",
                            Name = "Registro Único Tributario"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionLabelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Procesos",
                            Name = "Procesos",
                            PermissionLabelCode = "processes.view"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Configuración - Listar",
                            Name = "Configuracion",
                            PermissionLabelCode = "config.view"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Configuración - Editar",
                            Name = "Configuración",
                            PermissionLabelCode = "config.edit"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Usuarios - Listar",
                            Name = "Usuarios",
                            PermissionLabelCode = "users.view"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Usuarios - Editar",
                            Name = "Usuarios",
                            PermissionLabelCode = "users.edit"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Usuarios - Crear",
                            Name = "Usuarios",
                            PermissionLabelCode = "users.create"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Usuarios - Buscar",
                            Name = "Usuarios",
                            PermissionLabelCode = "users.search"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Equipos - Listar",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.view"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Equipos - Asignar",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.assign"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Equipos - Crear",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.create"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Equipos - Editar",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.edit"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Equipos - Buscar",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.search"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Equipos - Eliminar",
                            Name = "Equipos",
                            PermissionLabelCode = "teams.delete"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Tutelas - Listar",
                            Name = "Tutelas",
                            PermissionLabelCode = "guardianships.view"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Tutelas - Asignar",
                            Name = "Tutelas",
                            PermissionLabelCode = "guardianships.assign"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Tutelas - Descargar",
                            Name = "Tutelas",
                            PermissionLabelCode = "guardianships.download"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Tutelas - Contestar",
                            Name = "Tutelas",
                            PermissionLabelCode = "guardianships.answered"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Tutelas - Buscar",
                            Name = "Tutelas",
                            PermissionLabelCode = "guardianships.search"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Documentos - Listar",
                            Name = "Documentos",
                            PermissionLabelCode = "documents.view"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Documentos - Descargar",
                            Name = "Documentos",
                            PermissionLabelCode = "documents.download"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Documento - Listar",
                            Name = "Documento",
                            PermissionLabelCode = "document.view"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Documento - Descargar",
                            Name = "Documento",
                            PermissionLabelCode = "document.download"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Demandas - Listar",
                            Name = "Demandas",
                            PermissionLabelCode = "demands.view"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Demandas - Buscar",
                            Name = "Demandas",
                            PermissionLabelCode = "demands.search"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Datos Extraidos - Listar",
                            Name = "Datos Extraidos",
                            PermissionLabelCode = "extractedData.view"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Datos Extraidos - Editar",
                            Name = "Datos Extraidos",
                            PermissionLabelCode = "extractedData.edit"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Datos Extraidos - Grabar",
                            Name = "Datos Extraidos",
                            PermissionLabelCode = "extractedData.save"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Generación Documento - Listar",
                            Name = "Generación Documento",
                            PermissionLabelCode = "generateDocument.view"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Generación Documento - Emergencia",
                            Name = "Generación Documento",
                            PermissionLabelCode = "generateDocument.emergency"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Generación Documento - Responder",
                            Name = "Generación Documento",
                            PermissionLabelCode = "generateDocument.responseDocument"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("GuidIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SupportFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ_People_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "GuidIdentifier" }, "UQ_People_GuidIdentifier")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Persona Natural"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Persona Jurídica"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ejecutivo Singular (Personal)",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ejecutivo Hipotecario",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pago Directo",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Abreviado de Restitución",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Reposición de Títulos",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ejecutivo Prendario",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ejecutivo Mixto",
                            ProcessTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Activas",
                            ProcessTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pasivas",
                            ProcessTypeId = 2
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocOrder")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProcessTemplateId");

                    b.ToTable("ProcessDocumentTypes");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProcessTypeId");

                    b.HasIndex("SubProcessId");

                    b.ToTable("ProcessTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "PLANTILLA 1. CONTESTACION SENCILLA TUTELA.docx",
                            FilePath = "Templates\\Guardianships",
                            FirmId = 1,
                            ProcessId = 1,
                            ProcessTypeId = 1,
                            SubProcessId = 1
                        },
                        new
                        {
                            Id = 2,
                            FileName = "PLANTILLA 2. ESCRITO DE EMERGENCIA.docx",
                            FilePath = "Templates\\Guardianships",
                            FirmId = 1,
                            ProcessId = 1,
                            ProcessTypeId = 1,
                            SubProcessId = 1
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProcessTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Demandas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tutelas"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Super Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Líder Tutelas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Asistente Tutelas"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            PermissionId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            PermissionId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 32,
                            PermissionId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 33,
                            PermissionId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 34,
                            PermissionId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 35,
                            PermissionId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 36,
                            PermissionId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 37,
                            PermissionId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 38,
                            PermissionId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 39,
                            PermissionId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 40,
                            PermissionId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 41,
                            PermissionId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 42,
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 43,
                            PermissionId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 44,
                            PermissionId = 16,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 45,
                            PermissionId = 17,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 46,
                            PermissionId = 18,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 47,
                            PermissionId = 19,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 48,
                            PermissionId = 20,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 49,
                            PermissionId = 21,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 50,
                            PermissionId = 22,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 51,
                            PermissionId = 25,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 52,
                            PermissionId = 26,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 53,
                            PermissionId = 27,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 54,
                            PermissionId = 28,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 55,
                            PermissionId = 29,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 56,
                            PermissionId = 30,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Asignado"
                        },
                        new
                        {
                            Id = 3,
                            Name = "En Proceso"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Terminado"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cerrado"
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.SubProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("SubProcesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "PSAD-MD",
                            Description = "Pagaré sin abonos, 1 demandado con medida Deceval",
                            ProcessId = 1
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "PCAD-MP",
                            Description = "Pagaré con abonos, 1 demandado y medidas previas",
                            ProcessId = 1
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "PSAPCAD-MD",
                            Description = "Pagaré sin abono, 1 pagaré con abono, 1 demandado y con medida Deceval",
                            ProcessId = 1
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "2PSAVD-MP",
                            Description = "Dos pagares sin abonos, varios demandados con medida previa",
                            ProcessId = 1
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "VPAD-MD",
                            Description = "Varios pagares, 1 demandado con medida Deceval",
                            ProcessId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Derecho de Petición",
                            ProcessId = 9
                        },
                        new
                        {
                            Id = 7,
                            Description = "Salud",
                            ProcessId = 9
                        },
                        new
                        {
                            Id = 8,
                            Description = "Habeas Data",
                            ProcessId = 9
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedCases")
                        .HasColumnType("int");

                    b.Property<bool>("IsLead")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCases")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Papirus.Administrator@email.com",
                            FirmId = 1,
                            FirstName = "Papirus",
                            HashedPassword = "tXJlkMcMxJhHvZ2RK6SQShIrBzWAJjPwkFHQLz23GTY=",
                            IsActive = true,
                            LastName = "Administrador",
                            MustChangePassword = false,
                            RegistrationDate = new DateTime(2024, 2, 28, 4, 18, 10, 0, DateTimeKind.Utc),
                            RoleId = 1,
                            Salt = "YzbbWdkVjn3JNFe1l/IJmA=="
                        },
                        new
                        {
                            Id = 2,
                            Email = "Basic.User@email.com",
                            FirmId = 1,
                            FirstName = "Basic",
                            HashedPassword = "TOFVyw0h3sWJMLk2s+gAljU0V2iNbgK2xBPWBX2gPsw=",
                            IsActive = true,
                            LastName = "User",
                            MustChangePassword = false,
                            RegistrationDate = new DateTime(2024, 2, 28, 4, 18, 10, 0, DateTimeKind.Utc),
                            RoleId = 2,
                            Salt = "JMHuzQKqE5CXuOTpPkqjDw=="
                        },
                        new
                        {
                            Id = 3,
                            Email = "Super.User@email.com",
                            FirmId = 1,
                            FirstName = "Super",
                            HashedPassword = "pZTwjSj8Iz7tLE/nKcW8v6Fl89YLPOMiLbQ4KmVNlLk=",
                            IsActive = true,
                            LastName = "User",
                            MustChangePassword = false,
                            RegistrationDate = new DateTime(2024, 2, 28, 4, 18, 10, 0, DateTimeKind.Utc),
                            RoleId = 3,
                            Salt = "/x2XaXyVuu6cAKTsIQJBgQ=="
                        });
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Actor", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.ActorType", "ActorType")
                        .WithMany("Actors")
                        .HasForeignKey("ActorTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Actors_ActorTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Case", "Case")
                        .WithMany("Actors")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Actors_Cases");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Person", "Person")
                        .WithMany("Actors")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Actors_People");

                    b.Navigation("ActorType");

                    b.Navigation("Case");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Case", "Case")
                        .WithOne("Assignment")
                        .HasForeignKey("Papirus.WebApi.Domain.Entities.Assignment", "CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignments_Cases");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Status", "Status")
                        .WithMany("Assignments")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignments_Status");

                    b.HasOne("Papirus.WebApi.Domain.Entities.TeamMember", "TeamMember")
                        .WithMany("Assignments")
                        .HasForeignKey("TeamMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignments_TeamMembers");

                    b.Navigation("Case");

                    b.Navigation("Status");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Case", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.BusinessLine", "BusinessLine")
                        .WithMany()
                        .HasForeignKey("BusinessLineId");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Process", "Process")
                        .WithMany("Cases")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_Cases_Processes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessType", "ProcessType")
                        .WithMany("Cases")
                        .HasForeignKey("ProcessTypeId")
                        .HasConstraintName("FK_Cases_ProcessTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.SubProcess", "SubProcess")
                        .WithMany("Cases")
                        .HasForeignKey("SubProcessId")
                        .HasConstraintName("FK_Cases_SubProcesses");

                    b.Navigation("BusinessLine");

                    b.Navigation("Process");

                    b.Navigation("ProcessType");

                    b.Navigation("SubProcess");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.CaseDocumentFieldValue", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.CaseProcessDocument", "CaseProcessDocument")
                        .WithMany("CaseDocumentFieldValues")
                        .HasForeignKey("CaseProcessDocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_CaseDocumentFieldValues_CaseProcessDocuments");

                    b.HasOne("Papirus.WebApi.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("CaseDocumentFieldValues")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CaseDocumentFieldValues_DocumentTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessDocumentType", "ProcessDocumentType")
                        .WithMany("CaseDocumentFieldValues")
                        .HasForeignKey("ProcessDocumentTypeId")
                        .HasConstraintName("FK_CaseDocumentFieldValues_ProcessDocumentTypes");

                    b.Navigation("CaseProcessDocument");

                    b.Navigation("DocumentType");

                    b.Navigation("ProcessDocumentType");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.CaseProcessDocument", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Case", "Case")
                        .WithMany("CaseProcessDocuments")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_CaseProcessDocuments_Cases");

                    b.HasOne("Papirus.WebApi.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("CaseProcessDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CaseProcessDocuments_DocumentTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessDocumentType", "ProcessDocumentType")
                        .WithMany("CaseProcessDocuments")
                        .HasForeignKey("ProcessDocumentTypeId")
                        .HasConstraintName("FK_CaseProcessDocuments_ProcessDocumentTypes");

                    b.Navigation("Case");

                    b.Navigation("DocumentType");

                    b.Navigation("ProcessDocumentType");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Person", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.IdentificationType", "IdentificationType")
                        .WithMany("People")
                        .HasForeignKey("IdentificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_People_IdentificationTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.PersonType", "PersonType")
                        .WithMany("People")
                        .HasForeignKey("PersonTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_People_PersonTypes");

                    b.Navigation("IdentificationType");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Process", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessType", "ProcessType")
                        .WithMany("Processes")
                        .HasForeignKey("ProcessTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Processes_ProcessTypes");

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessDocumentType", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("ProcessDocumentTypes")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessDocumentTypes_DocumentTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Process", "Process")
                        .WithMany("ProcessDocumentTypes")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessDocumentTypes_Processes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessTemplate", "ProcessTemplate")
                        .WithMany("ProcessDocumentTypes")
                        .HasForeignKey("ProcessTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessDocumentTypes_ProcessTemplates");

                    b.Navigation("DocumentType");

                    b.Navigation("Process");

                    b.Navigation("ProcessTemplate");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessTemplate", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Firm", "Firm")
                        .WithMany("ProcessTemplates")
                        .HasForeignKey("FirmId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessTemplates_Firms");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Process", "Process")
                        .WithMany("ProcessTemplates")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessTemplates_Processes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.ProcessType", "ProcessType")
                        .WithMany("ProcessTemplates")
                        .HasForeignKey("ProcessTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcessTemplates_ProcessTypes");

                    b.HasOne("Papirus.WebApi.Domain.Entities.SubProcess", "SubProcess")
                        .WithMany("ProcessTemplates")
                        .HasForeignKey("SubProcessId")
                        .HasConstraintName("FK_ProcessTemplates_SubProcesses");

                    b.Navigation("Firm");

                    b.Navigation("Process");

                    b.Navigation("ProcessType");

                    b.Navigation("SubProcess");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Permissions");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Roles");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.SubProcess", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Process", "Process")
                        .WithMany("SubProcesses")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("FK_SubProcesses_Processes");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.User", "Member")
                        .WithMany("TeamMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMembers_Users");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMembers_Teams");

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.User", b =>
                {
                    b.HasOne("Papirus.WebApi.Domain.Entities.Firm", "Firm")
                        .WithMany("Users")
                        .HasForeignKey("FirmId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Firms");

                    b.HasOne("Papirus.WebApi.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Firm");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ActorType", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Case", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Assignment")
                        .IsRequired();

                    b.Navigation("CaseProcessDocuments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.CaseProcessDocument", b =>
                {
                    b.Navigation("CaseDocumentFieldValues");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("CaseDocumentFieldValues");

                    b.Navigation("CaseProcessDocuments");

                    b.Navigation("ProcessDocumentTypes");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Firm", b =>
                {
                    b.Navigation("ProcessTemplates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.IdentificationType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Person", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.PersonType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Process", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("ProcessDocumentTypes");

                    b.Navigation("ProcessTemplates");

                    b.Navigation("SubProcesses");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessDocumentType", b =>
                {
                    b.Navigation("CaseDocumentFieldValues");

                    b.Navigation("CaseProcessDocuments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessTemplate", b =>
                {
                    b.Navigation("ProcessDocumentTypes");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.ProcessType", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("ProcessTemplates");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Status", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.SubProcess", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("ProcessTemplates");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Papirus.WebApi.Domain.Entities.User", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
