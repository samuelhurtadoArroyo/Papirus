{
	"info": {
		"_postman_id": "2661f87e-7fea-429c-b2ac-4a8f0b25ebf4",
		"name": "Papirus.WebApi.Api",
		"description": "This collections is for test all the API create for the PAPIRUS application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32306277"
	},
	"item": [
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "HealthCheck_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response status OK', function () {",
									"    pm.response.to.have.status(\"OK\");",
									"})",
									"",
									"pm.test(\"Response body is Healthy\", function () {",
									"    var responsebody = pm.response.text();",
									"    pm.expect(responsebody).to.include('Healthy');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/HealthCheck",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"HealthCheck"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22070 : User Login - API Testing",
			"item": [
				{
					"name": "LogIn _Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save the access token in an environment variable",
									"var responseJson = pm.response.json();",
									"var bodyToken = responseJson.token; ",
									"pm.collectionVariables.set(\"bodyToken\", bodyToken);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response status OK', function () {",
									"    pm.response.to.have.status(\"OK\");",
									"})",
									"",
									"pm.test(\"Token is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"password\":\"Arroyo2024*\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Valid Data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(3);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Correo Electrónico' no debería estar vacío.\");\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Correo Electrónico' no es una dirección de correo electrónico válida.\");\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' no debería estar vacío.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test('Response status Not Found', function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Papirus.Administrator@email.com\",\r\n  \"password\": \"Password*01\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Authentication/Logi",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Authentication",
								"Logi"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Empty Email_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(2);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Correo Electrónico' no debería estar vacío.\");\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Correo Electrónico' no es una dirección de correo electrónico válida.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"Password*01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Empty Password_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Password shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' no debería estar vacío.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Papirus.Administrator@email.com\",\r\n  \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Wrong Email_Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"})",
									"",
									"pm.test(\"Response indicates Unauthorized\", function () {",
									"    pm.expect(pm.response.json().title).to.eql(\"Unauthorized\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"No es un correo\",\r\n  \"password\": \"Password*01\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Wrong Password_Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response indicates Unauthorized\", function () {\r",
									"    pm.expect(pm.response.json().title).to.eql(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Papirus.Administrator@email.com\",\r\n  \"password\": \"Password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn_Wrong Credentials_Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response indicates Unauthorized\", function () {\r",
									"    pm.expect(pm.response.json().title).to.eql(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Administrator@email.com\",\r\n  \"password\": \"123456,.-,MHJ\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn _Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {",
									"    pm.response.to.have.status(500);",
									"})",
									"",
									"pm.test('Response status Server Error', function () {",
									"    pm.response.to.have.status(\"Server Error\");",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"Papirus.Administrator@email.com\",\n  \"password\": \"Password*01\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APILoginUrl}}",
							"host": [
								"{{APILoginUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22072 : Account Registration - API Testing",
			"item": [
				{
					"name": "All Users_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the response array has Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.response.json().forEach(function(users) {\r",
									"        pm.expect(users).to.have.property('id');\r",
									"        pm.expect(users).to.have.property('email');\r",
									"        pm.expect(users).to.have.property('firstName');\r",
									"        pm.expect(users).to.have.property('lastName');\r",
									"        pm.expect(users).to.have.property('password');\r",
									"        pm.expect(users).to.have.property('roleId');\r",
									"        pm.expect(users).to.have.property('isActive');\r",
									"        pm.expect(users).to.have.property('firmId');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"pm.test(\"Response has Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"        pm.expect(users).to.have.property('id');\r",
									"        pm.expect(users).to.have.property('email');\r",
									"        pm.expect(users).to.have.property('firstName');\r",
									"        pm.expect(users).to.have.property('lastName');\r",
									"        pm.expect(users).to.have.property('password');\r",
									"        pm.expect(users).to.have.property('roleId');\r",
									"        pm.expect(users).to.have.property('isActive');\r",
									"        pm.expect(users).to.have.property('firmId');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_Invalid Format_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value 'Uno' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "Uno",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_Empty Field_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value ':id' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users By ID_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response status Created', function () {",
									"    pm.response.to.have.status('Created');",
									"})",
									"",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('email');",
									"    pm.expect(pm.response.json()).to.have.property('firstName');",
									"    pm.expect(pm.response.json()).to.have.property('lastName');",
									"    pm.expect(pm.response.json()).to.have.property('roleId');",
									"    pm.expect(pm.response.json()).to.have.property('isActive');",
									"    pm.expect(pm.response.json()).to.have.property('firmId');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024.*\",\n  \"roleId\": \"3\"\n} \n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Empty email_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(2);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no debería estar vacío.\");\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no es una dirección de correo electrónico válida.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Invalid Email_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no es una dirección de correo electrónico válida.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"@1st.relay,@2nd.relay:user@final.domain\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Empty firstName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Invalid firstName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"1234567\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Empty lastName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Apellido' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Arroyo2024*\",\n  \"lastName\": \"\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\",\n  \"isActive\": true,\n  \"firmId\": \"1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Invalid lastName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Apellido' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Arroyo2024*\",\n  \"lastName\": \"\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\",\n  \"isActive\": true,\n  \"firmId\": \"1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Empty password_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Arroyo2024*\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Invalid password_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(4);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe tener al menos 8 caracteres. Ingresó 7 caracteres.\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 letra(s) mayúscula(s).\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 letra(s) minúscula(s).\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 dígito(s).\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"°!-**´´\",\n  \"roleId\": \"3\",\n  \"isActive\": true,\n  \"firmId\": \"1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Empty roleId_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"The userDto field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Arroyo2024*\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Invalid roleId_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"The userDto field is required.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"Uno\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"3\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Email Update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"email\": \"melissa.lopera@prueba2.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_firstName Update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Lorena\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_lastName Update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Lorena\",\n  \"lastName\": \"Jaramillo\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Password Update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Lorena\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_role ID Update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Ok', function () {\r",
									"    pm.response.to.have.status('Ok');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, email, firstName, lastName, password, roleId, isActive and firmId property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('email');\r",
									"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
									"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
									"    pm.expect(pm.response.json()).to.have.property('roleId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Lorena\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid Id_BadRequest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Empty email_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(2);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no debería estar vacío.\");\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no es una dirección de correo electrónico válida.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"No es un email\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid email_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Email' no es una dirección de correo electrónico válida.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"No es un email\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Empty firstName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"1231.2.2\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid firstName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"1231.2.2\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Empty lastName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Apellido' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"123454.,.12,12\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid lastName_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Apellido' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"123454.,.12,12\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Empty Passsword_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"123454.,.12,12\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid Passsword_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(4);\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe tener al menos 8 caracteres. Ingresó 7 caracteres.\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 letra(s) mayúscula(s).\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 letra(s) minúscula(s).\")\r",
									"    pm.expect(jsonData.errors).to.contains(\"'Contraseña' debe contener al menos 1 dígito(s).\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"123454.,.12,12\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Empty roleId_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"The userDto field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"tres\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Invalid roleId_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BadRequest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test(\"Response verify Email shouldn't be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorType).to.eql(\"Bad Request\");\r",
									"    pm.expect(jsonData.errors.length).to.eql(1);\r",
									"    pm.expect(jsonData.errors).to.contains(\"The userDto field is required.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"tres\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"10\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"email\": \"melissa.lopera@prueba1.net\",\n  \"firstName\": \"Melissa\",\n  \"lastName\": \"Lopera\",\n  \"password\": \"Arroyo2024*\",\n  \"roleId\": \"3\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIUserUrl}}",
							"host": [
								"{{APIUserUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response status No Content', function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value ':id' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "Uno",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22943 : MVP - Manage System Permissions - API Testing",
			"item": [
				{
					"name": "All Permissions_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the response array has Id, name and description property\", function () {\r",
									"    pm.response.json().forEach(function(permission) {\r",
									"        pm.expect(permission).to.have.property('id');\r",
									"        pm.expect(permission).to.have.property('name');\r",
									"        pm.expect(permission).to.have.property('description');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Permissions_Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the response array has Id, name and description property\", function () {\r",
									"    pm.response.json().forEach(function(permission) {\r",
									"        pm.expect(permission).to.have.property('id');\r",
									"        pm.expect(permission).to.have.property('name');\r",
									"        pm.expect(permission).to.have.property('description');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Permissions_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Permissions_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Permissions_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"pm.test(\"Response has Id, name and description property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys('id', 'name', 'description');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_Invalid Format_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search is not a valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "uno",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_Empty Field_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search should not be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response status Not Found', function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"})",
									"",
									"pm.test(\"Response verify that the ID value is not found\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Permissions By ID_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Created', function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, name, and description property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"    pm.expect(jsonData).to.have.property('description').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Tutela2\",\n  \"description\": \"Administración\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_Empty Name_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Name value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Nombre' no debería estar vacío.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"\",\n  \"description\": \"Administración\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_Empty Description_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Description property shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Descripción' no debería estar vacío.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Tutela2\",\n  \"description\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Tutela1\",\n  \"description\": \"Administración\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Tutela1\",\n  \"description\": \"Administración\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permission",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permission"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Permissions_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Tutela1\",\n  \"description\": \"Administración\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, name, and description property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"    pm.expect(jsonData).to.have.property('description').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"7\",\n  \"name\": \"TutelasUno\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Name update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with the Name information update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"7\",\n  \"name\": \"Tutelastress\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Description update_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with the Description information update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('description').that.is.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"7\",\n  \"name\": \"Esunaprueba1\",\n  \"description\": \"Tutelas21\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Invalid ID Format_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search should be a number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"Uno\",\n  \"name\": \"TutelasUno\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Empty Name_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Name property shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Nombre' no debería estar vacío.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Empty Description_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Description property shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Descripción' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"TuleaDos\",\n  \"description\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"TutelasUno\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"6\",\n  \"name\": \"TutelasUno\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permissions_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"TutelasUno\",\n  \"description\": \"Admon\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIPermissionsUrl}}",
							"host": [
								"{{APIPermissionsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permissions_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response status No Content', function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permissions_Empty ID_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value ':id' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permissions_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permissions_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permissions_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7",
									"description": "required"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22944 : MVP - Manage User Roles - API Testing",
			"item": [
				{
					"name": "AllRoles_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the response array has Id, name and description property\", function () {\r",
									"    pm.response.json().forEach(function(permission) {\r",
									"        pm.expect(permission).to.have.property('id');\r",
									"        pm.expect(permission).to.have.property('name');\r",
									"        pm.expect(permission).to.have.property('description');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "Administrador",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AllRoles_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "Administrador",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AllRoles_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Role"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "Administrador",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AllRoles_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "Administrador",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"pm.test(\"Response has Id and name property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys('id', 'name');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_Invalid Format_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search is not a valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "uno",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_Empty field_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search should not be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_Invalid ID_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "required"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles By ID_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response status Created', function () {",
									"    pm.response.to.have.status('Created');",
									"})",
									"",
									"pm.test(\"Response is an object with Id and name property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Id\": \"0\",\n  \"name\": \"Prueba1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Name value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Prueba1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Prueba1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0\",\n  \"name\": \"Prueba1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id and name property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Invalid Format_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value 'Uno' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"Uno\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Empty ID_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value ':id' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Empty Name_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the Name value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"5\",\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"Prueba2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIRolesUrl}}",
							"host": [
								"{{APIRolesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response status No Content', function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role_Empty Field_BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"The value ':id' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Roles/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Roles",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22945 : MVP - TECH - Oversee Legal Firm Profiles - API Testing",
			"item": [
				{
					"name": "All Firms_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the response has Id, name and guidIdentifier property\", function () {\r",
									"    pm.response.json().forEach(function(permission) {\r",
									"        pm.expect(permission).to.have.property('id');\r",
									"        pm.expect(permission).to.have.property('name');\r",
									"        pm.expect(permission).to.have.property('guidIdentifier');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Firms_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Firms_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firm"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Firms_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "<integer>",
									"disabled": true
								},
								{
									"key": "SortOrder",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "SearchString",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "CurrentFilter",
									"value": "<string>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"})\r",
									"pm.test(\"Response has Id, name and guidIdentifier property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys('id', 'name', 'guidIdentifier');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_Invalid Format_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search is not a valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "uno"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_Empty Field_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Firm By Id_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Firm_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Response status Created', function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id, name and guidIdentifier property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"        pm.expect(jsonData).to.have.property('guidIdentifier').that.is.not.empty;\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"name\": \"GomezJaramillo\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Firm_Empty Name_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the Name value shouldn't be empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"    pm.expect(jsonData.errors).to.include(\"'Nombre' no debería estar vacío.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Firm_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"name\": \"GomezJaramillo\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Firm_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"name\": \"GomezJaramillo\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Firm_Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Prueba7\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Firm_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response status OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an object with Id and name property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"7\",\n  \"name\": \"PruebaPrueba\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Firm_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search should be a number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"Uno\",\n  \"name\": \"PruebaPrueba\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Firm_Unauthorized",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"5\",\n  \"name\": \"Prueba apta\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Firm_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Response status Not Found', function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify that the ID value is not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ErrorType').that.contains(\"Not Found\");\r",
									"    pm.expect(jsonData).to.have.property('Errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"4\",\n  \"name\": \"Prueba apta\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Firm_Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"5\",\n  \"name\": \"Prueba apta\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIFirmsUrl}}",
							"host": [
								"{{APIFirmsUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Firm By Id_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response status No Content', function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Firm By Id_Invalid Format_Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Response status Bad Request', function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test(\"Response verify the ID value search is not a valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errors').that.is.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "tres"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Firm By Id_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Firm By Id_Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test('Response status Unauthorized', function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Firm By Id_ServerError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"pm.test('Response status Server Error', function () {\r",
									"    pm.response.to.have.status(\"Server Error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bodyToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1.0/Firms/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1.0",
								"Firms",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bodyToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:5001",
			"type": "string"
		},
		{
			"key": "bodyToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "APILoginUrl",
			"value": "https://localhost:5001/api/v1.0/Authentication/Login",
			"type": "string"
		},
		{
			"key": "APIFirmsUrl",
			"value": "https://localhost:5001/api/v1.0/Firms"
		},
		{
			"key": "APIRolesUrl",
			"value": "https://localhost:5001/api/v1.0/Roles",
			"type": "string"
		},
		{
			"key": "APIUserUrl",
			"value": "https://localhost:5001/api/v1.0/Users",
			"type": "string"
		},
		{
			"key": "APIPermissionsUrl",
			"value": "https://localhost:5001/api/v1.0/Permissions",
			"type": "string"
		}
	]
}